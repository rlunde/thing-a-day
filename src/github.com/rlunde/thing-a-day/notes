
1) Import and Export format

Try using JSON like:

{"category-name":[
  {"id":"guid", "value":"some content"},
  {"value":"some other content"}
]}

If the id is set, an import should do an upsert, otherwise an insert.

2) Should provide for scheduled generation of periodic content

For example, have a tag name that refers to a category, that says to
generate 12 unique new items from a named category, once a day at 11:55pm.

That way, the API doesn't have to generate new content, just get the
cached content, which should be fast and efficient.

-----------

To get started:

There's a "source-me" file two directories up that should set up GOPATH to
include this directory. Run it like:

source source-me 

(Assuming you use bash, of course.)

I think I'll try to get this running on Heroku first. Fortunately, there
are some instructions for how to do that here:

https://revel.github.io/manual/deployment.html

Looks like I'll also need a heroku buildpack for that:

https://github.com/revel/heroku-buildpack-go-revel

To set it up for heroku I did:

$ cd thing-a-day/src/github.com/rlunde/thing-a-day
$ echo "github.com/rlunde/thing-a-day" > .godir
$ heroku create -b https://github.com/revel/heroku-buildpack-go-revel.git
The output of that was:

Creating spooky-coffin-6997... done, stack is cedar-14
Buildpack set. Next release on spooky-coffin-6997 will use https://github.com/revel/heroku-buildpack-go-revel.git.
https://spooky-coffin-6997.herokuapp.com/ | https://git.heroku.com/spooky-coffin-6997.git
Git remote heroku added

Since I did this on Halloween, I was very impressed that Heroku picked "spooky-coffin". Also, github's
contribution grid for today has switched from shades of green to shades of orange and black!

Looks like I should have followed these instructions on Heroku instead?
https://devcenter.heroku.com/articles/getting-started-with-go#introduction
https://devcenter.heroku.com/articles/go-support

Note: the "go get github.com/heroku/go-getting-started/..." is there to create a tutorial project,
so I didn't do it here.

NOTE: I started this project using revel, but have decided to switch to gorilla since it's much
simpler, and start with this example so I can use JWT for auth:

https://github.com/brainattica/golang-jwt-authentication-api-sample

To open the app on heroku, go to the directory above src (with the source_me file in it) and do: heroku open

I'm trying to add a database now...

I did:
heroku addons:create heroku-postgresql:hobby-dev

That created an environment variable named DATABASE_URL that is visible with "heroku config"
The "heroku pg" command shows more about the database.

I got a few more things:
$ go get -u github.com/lib/pq
$ go get github.com/codegangsta/negroni
$ go get github.com/heroku/go-getting-started/Godeps/_workspace/src/github.com/gin-gonic/gin
$ go get github.com/russross/blackfriday

I'm still missing some auth stuff. There's a page here that looks worth reading:
http://thenewstack.io/make-a-restful-json-api-go/

I think I skipped too far ahead and created the database. I backed up and am up to "create a procfile" now:
https://devcenter.heroku.com/articles/getting-started-with-go#define-a-procfile

That https://github.com/brainattica/golang-jwt-authentication-api-sample example has issues, since I can't find some of the 
dependencies. I edited these out for now:

// "api.jwt.auth/routers"
// "api.jwt.auth/settings"

I think I need to take a step back, and just do the heroku sample, except when I do heroku create, do it like the
solution says here:

http://stackoverflow.com/questions/16642753/cannot-deploy-sample-golang-application-to-heroku

Then, if/when I get that working on heroku, I will try to convert it over to a gorilla project.

So start over with this:
https://devcenter.heroku.com/articles/getting-started-with-go#introduction

Then convert it with something like this:
https://www.socketloop.com/tutorials/golang-gorilla-mux-routing-example

OK, got files copied, and can run locally from this directory, via:
go build cmd/thing-a-day/main.go
export PORT=5000
./main

I need to figure out how most people build go packages / products, and see if I can do that
the same way.

I think I should back up and make a code generator for a basic web project with options for
auth (login/password and/or oauth for users, apikey or jwt for APIs), and try to set it up
so that it gets built and tested every day. That way people can get past all the crazy nonsense
of just getting started, without running into bit rot that means they spend hours following
a tutorial and then it just doesn't work, and you can't figure out why. Sheesh.

Right now, this opens the sample app, but I think it will break as soon as I push the current files to heroku:

heroku open --app spooky-coffin-6997

Yep, this is what happens when I try to push:

git push heroku master
Counting objects: 300, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (255/255), done.
Writing objects: 100% (300/300), 1.15 MiB | 1.46 MiB/s, done.
Total 300 (delta 68), reused 3 (delta 0)
remote: Compressing source files... done.
remote: Building source:
remote:
remote: -----> Fetching set buildpack https://github.com/revel/heroku-buildpack-go-revel.git... done
remote:
remote:  !     Push rejected, failed to detect set buildpack https://github.com/revel/heroku-buildpack-go-revel.git
remote: More info: https://devcenter.heroku.com/articles/buildpacks#detection-failure
remote:
remote: Verifying deploy....
remote:
remote: !   Push rejected to spooky-coffin-6997.
remote:
To https://git.heroku.com/spooky-coffin-6997.git
 ! [remote rejected] master -> master (pre-receive hook declined)
 error: failed to push some refs to 'https://git.heroku.com/spooky-coffin-6997.git'

I tried clearing buildpacks and pushing again, and now it says I'm missing Godeps (which I am, since they're down a few levels):

Rons-MBP:thing-a-day ron$ heroku buildpacks:clear
Buildpacks cleared. Next release on spooky-coffin-6997 will detect buildpack normally.
Rons-MBP:thing-a-day ron$ git push heroku master
Counting objects: 300, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (255/255), done.
Writing objects: 100% (300/300), 1.15 MiB | 1005.00 KiB/s, done.
Total 300 (delta 68), reused 3 (delta 0)
remote: Compressing source files... done.
remote: Building source:
remote:
remote: -----> Go app detected
remote:  !     Godeps are required. For instructions:
remote:  !     https://devcenter.heroku.com/articles/go-support
remote:
remote:  !     Push rejected, failed to compile Go app
remote:
remote: Verifying deploy...
remote:
remote: !   Push rejected to spooky-coffin-6997.
remote:
To https://git.heroku.com/spooky-coffin-6997.git
 ! [remote rejected] master -> master (pre-receive hook declined)
 error: failed to push some refs to 'https://git.heroku.com/spooky-coffin-6997.git'

