
1) Import and Export format

Try using JSON like:

{"category-name":[
  {"id":"guid", "value":"some content"},
  {"id":"another-guid", "value":"some other content"}
]}

If the id is set, an import should do an upsert, otherwise an insert.

2) Should provide for scheduled generation of periodic content

For example, have a tag name that refers to a category, that says to
generate 12 unique new items from a named category, once a day at 11:55pm.

That way, the API doesn't have to generate new content, just get the
cached content, which should be fast and efficient.

-----------

To get started:

source source-me.sh

(Assuming you use bash, of course.)

I've tried a Whole Bunch of things, most of which sound like simple
boilerplate makers, that get a ways and then crash and burn. I'm
starting over with a simple thing I make myself, and then I'll
gradually make it more complete.

Oops. Forgot to work on the develop branch after I clobbered everything
to switch over. 

------------
Thoughts on API use:

1) Don't bother with auth -- initially, plan for this to be a microservice
   that is deployed internally -- e.g. a web site will run this and call it
2) APIs
  POST /categories - create a new category
  POST /templates - a template says what to fill in 
  POST /items/category/{category}/ - add one or more items
  GET /items/category/{category}/id/{id} - get a specific item 
  PUT /items/category/{category}/id/{id} - update a specific item
  GET /categories/{category}?count={n} - return N unique items from category
  GET /categories - return a list of categories and stats about them (num items, etc.)
  GET /templates/id/{id}/context/{context}/duration/{seconds}

Thoughts on flow:
a) create a template that uses one or more instances from one or more categories, and that 
   has a duration. 
b) create values for the categories used by the template
c) When you GET that template the first time, it fills in values in the 
   template from the categories. The "context" string can be missing if you
   always want new values, or if you want the same values returned for the
   same context, you pass a context string and a duration (e.g. 86400, for the
   number of seconds in a day). Once the time of the original request plus the
   duration in seconds is less than the current time, it gets new values.
d) it tries to avoid using the same values that have been used recently for
   a category in a particular context, so a category has a "rememberCount" of
   substitutions. For example, if you are substituting horoscope
   "predictions" and you don't want to re-use one seen in the last 10 days,
   and there are 12 predictions per template, you'd set rememberCount for
   predictions to 120. (That assumes you have more than 120 predictions.)